networks:
  proxy:
    external: true
  dgsuc_network:
    internal: true

secrets:
  ssh_private_key_ro:
    external: true
  ssh_public_key_ro:
    external: true
  ssh_private_key_rw:
    external: true
  ssh_public_key_rw:
    external: true

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: nfs
      o: nfsvers=4,addr=pum1f3.rec.uba.ar,nolock,soft,rw
      device: :/var/swarm_volumes/volumes/dgsuc/postgres_data
  redis_data:
    driver: local
    driver_opts:
      type: nfs
      o: nfsvers=4,addr=pum1f3.rec.uba.ar,nolock,soft,rw
      device: :/var/swarm_volumes/volumes/dgsuc/redis_data
  php_sessions:
    driver: local
    driver_opts:
      type: nfs
      o: nfsvers=4,addr=pum1f3.rec.uba.ar,nolock,soft,rw
      device: :/var/swarm_volumes/volumes/dgsuc/php_sessions
  php_cache:
    driver: local
    driver_opts:
      type: nfs
      o: nfsvers=4,addr=pum1f3.rec.uba.ar,nolock,soft,rw
      device: :/var/swarm_volumes/volumes/dgsuc/php_cache
  nginx_logs:
    driver: local
    driver_opts:
      type: nfs
      o: nfsvers=4,addr=pum1f3.rec.uba.ar,nolock,soft,rw
      device: :/var/swarm_volumes/volumes/dgsuc/nginx_logs
  app_logs:
    driver: local
    driver_opts:
      type: nfs
      o: nfsvers=4,addr=pum1f3.rec.uba.ar,nolock,soft,rw
      device: :/var/swarm_volumes/volumes/dgsuc/app_logs
  postgres_logs:
    driver: local
    driver_opts:
      type: nfs
      o: nfsvers=4,addr=pum1f3.rec.uba.ar,nolock,soft,rw
      device: :/var/swarm_volumes/volumes/dgsuc/postgres_logs
  redis_logs:
    driver: local
    driver_opts:
      type: nfs
      o: nfsvers=4,addr=pum1f3.rec.uba.ar,nolock,soft,rw
      device: :/var/swarm_volumes/volumes/dgsuc/redis_logs
  workers_logs:
    driver: local
    driver_opts:
      type: nfs
      o: nfsvers=4,addr=pum1f3.rec.uba.ar,nolock,soft,rw
      device: :/var/swarm_volumes/volumes/dgsuc/workers_logs

services:
  # ==========================================
  # APLICACIÓN PHP-FPM
  # ==========================================
  app:
    image: registry.rec.uba.ar/dgsuc/app:production
    # build options removed for Swarm mode
    environment:
      - APP_ENV=${APP_ENV:-production}
      - APP_DEBUG=${APP_DEBUG:-false}
      - APP_KEY=${APP_KEY}
      - APP_URL=${APP_URL:-https://dgsuc.uba.ar}
      
      # Database
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SCHEMA=${DB_SCHEMA:-suc_app}
      
      # External Database (Mapuche via SSH Tunnel)
      - DB2_CONNECTION=pgsql
      - DB2_HOST=127.0.0.1
      - DB2_PORT=5433
      - DB2_DATABASE=${DB2_DATABASE}
      - DB2_USERNAME=${DB2_USERNAME}
      - DB2_PASSWORD=${DB2_PASSWORD}
      
      # Redis
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_PORT=6379
      
      # Cache and Session
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis
      
      # Microsoft Azure AD
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET}
      - MICROSOFT_REDIRECT_URI=${MICROSOFT_REDIRECT_URI}
    
    volumes:
      - php_sessions:/var/www/html/storage/framework/sessions
      - php_cache:/var/www/html/storage/framework/cache
      - app_logs:/var/log/php
    
    networks:
      - dgsuc_network
    
    depends_on:
      - postgres
      - redis
    
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    
    healthcheck:
      test: ["CMD", "php", "/var/www/html/artisan", "tinker", "--execute=echo 'OK';"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==========================================
  # NGINX WEB SERVER
  # ==========================================
  nginx:
    image: registry.rec.uba.ar/dgsuc/nginx:latest
    # build options removed for Swarm mode
    # Ports handled by Traefik proxy
    # ports:
    #   - "80:80"
    #   - "443:443"
    environment:
      - NGINX_HOST=${NGINX_HOST:-dgsuc.uba.ar}
    volumes:
      - ./docker/nginx/sites/default-http.conf:/etc/nginx/sites-enabled/default:ro
      - nginx_logs:/var/log/nginx
    networks:
      - dgsuc_network
      - proxy

    depends_on:
      - app
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=proxy"
        - "traefik.http.routers.dgsuc.rule=Host(`${NGINX_HOST:-dgsuc.uba.ar}`)"
        - "traefik.http.routers.dgsuc.entrypoints=websecure"
        - "traefik.http.routers.dgsuc.tls=true"
        - "traefik.http.routers.dgsuc.tls.certresolver=letsencrypt"
        - "traefik.http.routers.dgsuc.service=dgsuc"
        - "traefik.http.services.dgsuc.loadbalancer.server.port=80"
        - "traefik.http.services.dgsuc.loadbalancer.server.scheme=http"
      resources:
        limits:
          cpus: '2'
          memory: 1G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # POSTGRESQL DATABASE (Imagen personalizada)
  # ==========================================
  postgres:
    image: registry.rec.uba.ar/dgsuc/postgres:production
    # container_name removed for Swarm mode
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
    networks:
      - dgsuc_network
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ==========================================
  # REDIS CACHE (Imagen personalizada)
  # ==========================================
  redis:
    image: registry.rec.uba.ar/dgsuc/redis:production
    # container_name removed for Swarm mode
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - dgsuc_network
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 4G
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==========================================
  # QUEUE WORKERS
  # ==========================================
  workers:
    image: registry.rec.uba.ar/dgsuc/workers:latest
    # build options removed for Swarm mode
    environment:
      - APP_ENV=${APP_ENV:-production}
      - DB_HOST=postgres
      - DB_DATABASE=${DB_DATABASE}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - WORKER_PROCESSES=${WORKER_PROCESSES:-6}
      - WORKER_MEMORY=${WORKER_MEMORY:-4096}
      - WORKER_TIMEOUT=${WORKER_TIMEOUT:-3600}
    volumes:
      - workers_logs:/var/log/supervisor
    networks:
      - dgsuc_network
    depends_on:
      - postgres
      - redis
      - app
    deploy:
      mode: replicated
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "10"

  # ==========================================
  # SSH TUNNELS (servicios separados para cada túnel)
  # ==========================================
  
  # Túnel 1: DB Producción (puerto 5434) - Solo lectura
  ssh-tunnel-dbprod:
    image: jnovack/autossh:latest
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
    environment:
      - SSH_REMOTE_HOST=${SSH_HOST_DBPROD:-dbprod.uba.ar}
      - SSH_REMOTE_USER=${SSH_USER_DBPROD:-dgsuc_app_ro}
      - SSH_REMOTE_PORT=${SSH_PORT_DBPROD:-22}
      - SSH_TARGET_HOST=127.0.0.1
      - SSH_TARGET_PORT=5432
      - SSH_TUNNEL_PORT=5434
      - SSH_KEY_FILE=/run/secrets/ssh_private_key_ro
    secrets:
      - source: ssh_private_key_ro
        target: /run/secrets/ssh_private_key_ro
        mode: 0600
    networks:
      - dgsuc_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Túnel 2: DB Producción R2 (puerto 5436) - Lectura/escritura
  ssh-tunnel-dbprodr2:
    image: jnovack/autossh:latest
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
    environment:
      - SSH_REMOTE_HOST=${SSH_HOST_DBPRODR2:-dbprodr2.uba.ar}
      - SSH_REMOTE_USER=${SSH_USER_DBPRODR2:-dgsuc_app_rw}
      - SSH_REMOTE_PORT=${SSH_PORT_DBPRODR2:-22}
      - SSH_TARGET_HOST=127.0.0.1
      - SSH_TARGET_PORT=5432
      - SSH_TUNNEL_PORT=5436
      - SSH_KEY_FILE=/run/secrets/ssh_private_key_rw
    secrets:
      - source: ssh_private_key_rw
        target: /run/secrets/ssh_private_key_rw
        mode: 0600
    networks:
      - dgsuc_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Túnel 3: DB Test (puerto 5433) - Solo lectura
  ssh-tunnel-dbtest:
    image: jnovack/autossh:latest
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
    environment:
      - SSH_REMOTE_HOST=${SSH_HOST_DBTEST:-dbtest.uba.ar}
      - SSH_REMOTE_USER=${SSH_USER_DBTEST:-dgsuc_app_ro}
      - SSH_REMOTE_PORT=${SSH_PORT_DBTEST:-22}
      - SSH_TARGET_HOST=127.0.0.1
      - SSH_TARGET_PORT=5432
      - SSH_TUNNEL_PORT=5433
      - SSH_KEY_FILE=/run/secrets/ssh_private_key_ro
    secrets:
      - source: ssh_private_key_ro
        target: /run/secrets/ssh_private_key_ro
        mode: 0600
    networks:
      - dgsuc_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Túnel 4: DB Test R2 (puerto 5435) - Lectura/escritura
  ssh-tunnel-dbtestr2:
    image: jnovack/autossh:latest
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
        max_attempts: 3
    environment:
      - SSH_REMOTE_HOST=${SSH_HOST_DBTESTR2:-dbtestr2.uba.ar}
      - SSH_REMOTE_USER=${SSH_USER_DBTESTR2:-dgsuc_app_rw}
      - SSH_REMOTE_PORT=${SSH_PORT_DBTESTR2:-22}
      - SSH_TARGET_HOST=127.0.0.1
      - SSH_TARGET_PORT=5432
      - SSH_TUNNEL_PORT=5435
      - SSH_KEY_FILE=/run/secrets/ssh_private_key_rw
    secrets:
      - source: ssh_private_key_rw
        target: /run/secrets/ssh_private_key_rw
        mode: 0600
    networks:
      - dgsuc_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

