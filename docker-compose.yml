x-common-variables: &common-variables
  TZ: America/Argentina/Buenos_Aires
  APP_NAME: ${APP_NAME:-Sistema DGSUC}
  APP_ENV: ${APP_ENV:-production}
  APP_DEBUG: ${APP_DEBUG:-false}
  APP_KEY: ${APP_KEY}
  APP_URL: ${APP_URL:-https://dgsuc.uba.ar}
  LOG_CHANNEL: ${LOG_CHANNEL:-stack}
  LOG_LEVEL: ${LOG_LEVEL:-info}
  BROADCAST_DRIVER: ${BROADCAST_DRIVER:-log}
  CACHE_DRIVER: ${CACHE_DRIVER:-redis}
  SESSION_DRIVER: ${SESSION_DRIVER:-redis}
  SESSION_LIFETIME: ${SESSION_LIFETIME:-120}
  QUEUE_CONNECTION: ${QUEUE_CONNECTION:-redis}

x-app-volumes: &app-volumes
  - ./app:/var/www/html
  - ./app/storage:/var/www/html/storage
  - ./app/bootstrap/cache:/var/www/html/bootstrap/cache
  - php_sessions:/var/www/html/storage/framework/sessions
  - php_cache:/var/www/html/storage/framework/cache

networks:
  dgsuc_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  php_sessions:
    driver: local
  php_cache:
    driver: local
  certbot_logs:
    driver: local
  nginx_logs:
    driver: local

services:
  # PHP-FPM Application
  app:
    env_file:
      - .env
      - .env.secrets  # Cargar variables sensibles
    build:
      context: .
      dockerfile: ./docker/app/Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: dgsuc_app
    restart: unless-stopped
    environment:
      <<: *common-variables
      DOCKER_ENV: ${APP_ENV}
      CONTAINER_NAME: dgsuc_app
      # Database principal (interna)
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-suc_app}
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-1234}
      DB_SCHEMA: suc_app
      
      # Database externa DB2 (otra aplicación)
      # Usando el mismo PostgreSQL del contenedor temporalmente
      DB2_CONNECTION: ${DB2_CONNECTION:-pgsql}
      DB2_HOST: ${DB2_HOST:-postgres}
      DB2_PORT: ${DB2_PORT:-5432}
      DB2_DATABASE: ${DB2_DATABASE:-liqui}
      DB2_USERNAME: ${DB2_USERNAME:-dgsuc_user}
      DB2_PASSWORD: ${DB2_PASSWORD:-dgsuc_password_2024}
      
      # Database externa DB3 (otra aplicación)
      # Usando el mismo PostgreSQL del contenedor temporalmente
      DB3_CONNECTION: ${DB3_CONNECTION:-pgsql}
      DB3_HOST: ${DB3_HOST:-postgres}
      DB3_PORT: ${DB3_PORT:-5432}
      DB3_DATABASE: ${DB3_DATABASE:-liqui}
      DB3_USERNAME: ${DB3_USERNAME:-dgsuc_user}
      DB3_PASSWORD: ${DB3_PASSWORD:-dgsuc_password_2024}
      
      # Variables para otras conexiones Laravel (PROD, TEST, etc.)
      # Usando el mismo PostgreSQL del contenedor
      DB_PROD_HOST: ${DB_PROD_HOST:-postgres}
      DB_PROD_PORT: ${DB_PROD_PORT:-5432}
      DB_PROD_DATABASE: ${DB_PROD_DATABASE:-mapuche}
      DB_PROD_USERNAME: ${DB_PROD_USERNAME:-dgsuc_user}
      DB_PROD_PASSWORD: ${DB_PROD_PASSWORD:-dgsuc_password_2024}
      
      DB_TEST_HOST: ${DB_TEST_HOST:-postgres}
      DB_TEST_PORT: ${DB_TEST_PORT:-5432}
      DB_TEST_DATABASE: ${DB_TEST_DATABASE:-sicoss_test}
      DB_TEST_USERNAME: ${DB_TEST_USERNAME:-dgsuc_user}
      DB_TEST_PASSWORD: ${DB_TEST_PASSWORD:-dgsuc_password_2024}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_DRIVER: redis
      SESSION_DRIVER: redis
      QUEUE_CONNECTION: redis
    volumes: *app-volumes
    networks:
      - dgsuc_network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Web Server
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: dgsuc_nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./app:/var/www/html:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/sites:/etc/nginx/sites-available:ro
      - ./docker/nginx/certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
    networks:
      - dgsuc_network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production
      - development

  # PostgreSQL Database Principal (solo DB interna)
  postgres:
    image: postgres:17-alpine
    container_name: dgsuc_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_DATABASE:-suc_app}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-1234}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=es_AR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql/01-create-schema.sql:/docker-entrypoint-initdb.d/01-create-schema.sql:ro
      - ./docker/postgres/init-db.sh:/docker-entrypoint-initdb.d/02-configure-auth.sh:ro
      - ./docker/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - dgsuc_network
    ports:
      - "${DB_EXTERNAL_PORT:-7432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_buffers=2GB
      -c effective_cache_size=6GB
      -c work_mem=256MB
      -c maintenance_work_mem=512MB
      -c max_connections=200
      -c checkpoint_completion_target=0.9
      -c wal_buffers=64MB
      -c log_statement=mod
      -c log_min_duration_statement=1000
    profiles:
      - production
      - development


  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: dgsuc_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - dgsuc_network
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    command: redis-server /usr/local/etc/redis/redis.conf ${REDIS_PASSWORD:+--requirepass ${REDIS_PASSWORD}}
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ${REDIS_PASSWORD:+--a ${REDIS_PASSWORD}} ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - production

  # Queue Workers
  workers:
    build:
      context: ./docker/workers
      dockerfile: Dockerfile
    container_name: dgsuc_workers
    restart: unless-stopped
    environment:
      <<: *common-variables
      WORKER_PROCESSES: ${WORKER_PROCESSES:-4}
      WORKER_MEMORY: ${WORKER_MEMORY:-2048}
      WORKER_TIMEOUT: ${WORKER_TIMEOUT:-3600}
    volumes: *app-volumes
    networks:
      - dgsuc_network
    depends_on:
      - app
      - postgres
      - redis
    command: supervisord -c /etc/supervisor/conf.d/supervisord.conf
    profiles:
      - production

  # Scheduler (Cron)
  scheduler:
    build:
      context: ./docker/app
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: dgsuc_scheduler
    restart: unless-stopped
    environment:
      <<: *common-variables
    volumes: *app-volumes
    networks:
      - dgsuc_network
    depends_on:
      - app
      - postgres
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "while true; do
        php /var/www/html/artisan schedule:run --verbose --no-interaction &
        sleep 60
      done"
    profiles:
      - production

  certbot:
    image: certbot/certbot:latest
    container_name: dgsuc_certbot
    volumes:
      - ./docker/nginx/certs:/etc/letsencrypt
      - ./app/public:/var/www/html
      - certbot_logs:/var/log/letsencrypt
    environment:
      - CERTBOT_EMAIL=${CERTBOT_EMAIL:-admin@uba.ar}
      - CERTBOT_DOMAIN=${CERTBOT_DOMAIN:-dgsuc.uba.ar}
    command: >
      sh -c "
        certbot certonly --webroot --webroot-path=/var/www/html
        --email $${CERTBOT_EMAIL} --agree-tos --no-eff-email
        -d $${CERTBOT_DOMAIN} -d www.$${CERTBOT_DOMAIN}
        --keep-until-expiring --non-interactive --staging
      "
    depends_on:
      - nginx
    restart: "no"
    profiles:
      - ssl